#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

(slice, slice, slice,cell, int, int) load_data() {
    slice ds = get_data().begin_parse();
    return ( ds~load_msg_addr(), 
    ds~load_msg_addr(),
    ds~load_msg_addr(), 
    ds~load_dict(), 
    ds~load_uint(64), 
    ds~load_uint(64));
}

() store_data(slice jetton_usdt, slice owner_address, slice monitor,cell dic, int total_add, int budget) impure {
    ;; slice sl  = dic.begin_parse();
    ;; cell dict_data = sl~load_dict();
    set_data(
        begin_cell()
        .store_slice(jetton_usdt)
        .store_slice(owner_address)
        .store_slice(monitor)
        .store_dict(dic)
        .store_uint(total_add, 64)
        .store_uint(budget, 64)
        .end_cell()
    );
}

() send_tokens(slice recipient, int amount, int query_id,slice jetton_wallet_aff) impure {
    ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, _,_,_) = load_data();
    ;; slice info_pool = info.begin_parse();
    ;; info_pool~load_msg_addr();
    ;; info_pool~load_uint(64);
    ;; slice jetton_wallet_aff = info_pool~load_msg_addr();
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_wallet_aff)
    .store_coins(0)
    .store_uint(1, 107);
  var msg_body = begin_cell()
            .store_uint(op::jetton_transfer(), 32) 
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(recipient)
            .store_slice(recipient)
            .store_uint(0, 1)
            .store_coins(4000000)
            .store_uint(0, 1)
        .end_cell();

  msg = msg.store_ref(msg_body);
  send_raw_message(msg.end_cell(), 64);
}
int calculate_reward(int level, int type_) {
  int weight_point = 1;
 
  if(type_ == 1){
    weight_point = 1;
  }
  if(type_ == 2){
    weight_point = 10;
  }
  if(type_ == 3){
    weight_point = 100;
  }
  if(type_ == 4){
    weight_point = 500;
  }
  if(type_ == 5){
    weight_point = 5000;
  }
  if(type_ == 6){
    weight_point = 50000;
  }
  if(type_ == 7){
    weight_point = 500000;
  }
  int points_mint = (weight_point *  level) + weight_point * 100;
  return points_mint;
}
int calculate_reward_jetton(int level, int type_, int total_points, int budget, int time_start) {
  int points = calculate_reward(level,type_);
  int deta_time = now() - time_start;
  if(deta_time < 3600){
    return 0;
  }
  int reward_per_second = (budget / total_points)/(24 * 3600); ;;  budget x desimals
  int coins = deta_time * points * reward_per_second;
  return coins;
}
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (slice usdt_address, slice owner_address,slice monitor_address,cell dict_, int total_add, int budget) = load_data();
    if (op == 1) {
        slice jetton_wallet = in_msg_body~load_msg_addr();
        store_data(jetton_wallet, owner_address, monitor_address, dict_,total_add, budget);
        return ();
    }

    if (op == op::user_harvest()) {
        int nftId = in_msg_body~load_uint(256);
        int key = in_msg_body~load_uint(128);
        
        (slice payload_dic, int success_dic) = dict_.udict_get?(256, nftId);
        throw_unless(98, success_dic);
  
        if(success_dic){
      ;; throw_unless(98, success);
          slice add = payload_dic~load_msg_addr();
          slice collections_ = payload_dic~load_msg_addr();
          int key_ = payload_dic~load_uint(128);
          int level_ = payload_dic~load_uint(32);
          int type_ = payload_dic~load_uint(8);
          int status = payload_dic~load_uint(1);
          int time_start = payload_dic~load_uint(256);
          throw_unless(402, equal_slices(add, sender_address));
          throw_unless(405, key == key_);
          throw_unless(406, status == 1);

          int timestake = now();
          cell newcell = begin_cell().store_slice(add).store_slice(collections_).store_uint(key_,128).store_uint(level_,32)
                      .store_uint(type_,8).store_uint(1,1).store_uint(timestake,256).end_cell();
          dict_~udict_set(256, nftId, newcell.begin_parse());
          int points = calculate_reward(level_, type_);
          int amounts = calculate_reward_jetton(level_,type_,total_add, budget, time_start);
          send_tokens(add,amounts,query_id,usdt_address);
          store_data( usdt_address, owner_address, monitor_address, dict_, total_add, budget);
        }
      return ();
    }
    if (op == op::change_owner()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        store_data(usdt_address, owner_address, monitor_address, dict_,total_add, budget);
        return ();
    }
    if (op == op::change_jetton_wallet()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        slice newJetton = in_msg_body~load_msg_addr();
        store_data(newJetton, owner_address, monitor_address, dict_,total_add, budget);
        return ();
    }

    if (op == op::change_budget()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int new_budget = in_msg_body~load_uint(64);
        store_data(usdt_address, owner_address, monitor_address, dict_,total_add, new_budget);
        return ();
    }

    if (op == op::change_monitor()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, monitor_address));
        slice new_monitor = in_msg_body~load_msg_addr();
        store_data(usdt_address, owner_address, new_monitor, dict_, total_add, budget);
        return ();
    }
    if (op == op::claim_token_remain()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int amount = budget - total_add;
        throw_unless(400, amount > 0);
        send_tokens(sender_address,amount,query_id, usdt_address);
        ;; claim remain
        return ();
    }
    if (op == op::claim_token_admin()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int _amount = in_msg_body~load_uint(64);
        throw_unless(400, _amount > 0);
        send_tokens(sender_address,_amount,query_id, usdt_address);
        ;; claim remain
        return ();
    }
    if (op == op::claim_ton_admin()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int withdraw_amount = in_msg_body~load_uint(64);
        throw_unless(400, withdraw_amount > 0);
        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner_address)
                .store_coins(withdraw_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
        ;; claim remain
        return ();
    }
    if (op == op::stake()) {
;; send_msg(stack_address, 0, op::stake(), query_id, begin_cell().store_uint(index, 256).store_slice(owner_address).store_slice(collection_address).store_uint(level_,32).store_uint(type_,8).store_uint(key_,128), 64);
        cell dt = in_msg_body~load_ref();
        slice sl  = dt.begin_parse();

        int nftId = sl~load_uint(256);
        slice owner_address_nft = sl~load_msg_addr();
        slice collections = sl~load_msg_addr();
        int level = sl~load_uint(32);
        int typeCard = sl~load_uint(8);
        int key_ = sl~load_uint(128);
        
        (slice payload_dic, int success_dic) = dict_.udict_get?(256, nftId);
        throw_unless(406, success_dic != 1);

        int points = calculate_reward(level,typeCard);
        total_add += points;
        int timestake = now();
        cell newcell = begin_cell().store_slice(owner_address_nft).store_slice(collections).store_uint(key_,128).store_uint(level,32)
                        .store_uint(typeCard,8).store_uint(1,1).store_uint(timestake,256).end_cell();
        dict_~udict_set(256, nftId, newcell.begin_parse());
            ;; store_data( usdt_address, owner_address, monitor_address, dict_, total_add, budget);
        store_data( usdt_address, owner_address, monitor_address, dict_, total_add, budget);

        ;; claim remain
        return ();
    }
    if (op == op::unstake()) {
;;  begin_cell().store_uint(index, 256).store_slice(owner_address).store_uint(level,32).store_uint(type,8).store_uint(key,128);
        cell dt = in_msg_body~load_ref();
        slice sl  = dt.begin_parse();
        int nftId = sl~load_uint(256);
        slice owner_address_nft = sl~load_msg_addr();
        slice collections = sl~load_msg_addr();
        int level = sl~load_uint(32);
        int typeCard = sl~load_uint(8);
        int key = sl~load_uint(128);
        
        (slice payload_dic, int success_dic) = dict_.udict_get?(256, nftId);
        throw_unless(98, success_dic);
  
        if(success_dic){
            ;; throw_unless(98, success);
            slice add = payload_dic~load_msg_addr();
            slice collections_ = payload_dic~load_msg_addr();
            int key_ = payload_dic~load_uint(128);
            int level_ = payload_dic~load_uint(32);
            int type_ = payload_dic~load_uint(8);
            int status = payload_dic~load_uint(1);
            int time_start = payload_dic~load_uint(256);
            throw_unless(402, equal_slices(add, owner_address_nft));
            throw_unless(403, equal_slices(collections, collections_));
            throw_unless(405, key == key_);
            throw_unless(406, status == 1);

            int timestake = now();
            cell newcell = begin_cell().store_slice(owner_address_nft).store_slice(collections).store_uint(key_,128).store_uint(level,32)
                        .store_uint(typeCard,8).store_uint(0,1).store_uint(timestake,256).end_cell();
            dict_~udict_set(256, nftId, newcell.begin_parse());
            int points = calculate_reward(level_, type_);
            int amounts = calculate_reward_jetton(level_,type_,total_add, budget, time_start);
            send_tokens(add,amounts,query_id,usdt_address);
            total_add -= points;
            store_data( usdt_address, owner_address, monitor_address, dict_, total_add, budget);
        }
        ;; claim remain
        return ();
    }
    throw(0xffffff);
}

;;
;;  GET Methods
;;

(slice, slice,slice,cell, int, int) get_reward_data() method_id {
  (slice usdt_address, slice owner_address, slice monitor,cell dic, int total_add, int budget) = load_data();
  return (usdt_address, owner_address,monitor, dic, total_add, budget);
}
(slice) get_user_reward(int key) method_id {
   (slice usdt_address, slice owner_address, slice monitor,cell dic, _, _) = load_data();
    (slice payload, int success) = dic.udict_get?(256, key);
    throw_unless(98, success);

    ;; int valid_until = payload~load_uint(64);
    return (payload);
}
(int) get_token_remain() method_id {
   (slice usdt_address, slice owner_address, slice monitor,  cell dic,int total_add, int budget) = load_data();
    int amount = budget - total_add;
    ;; int valid_until = payload~load_uint(64);
    return (amount);
}

(int) get_token_can_claim_by_NFT_id(int id) method_id {
  (slice usdt_address, slice owner_address, slice monitor,cell dict_, int total_add, int budget) = load_data();
  (slice payload_dic, int success_dic) = dict_.udict_get?(256, id);
        throw_unless(98, success_dic);
        if(success_dic){
      ;; throw_unless(98, success);
          slice add = payload_dic~load_msg_addr();
          slice collections_ = payload_dic~load_msg_addr();
          int key_ = payload_dic~load_uint(128);
          int level_ = payload_dic~load_uint(32);
          int type_ = payload_dic~load_uint(8);
          int status = payload_dic~load_uint(1);
          if(status == 0){
            return 0;
          }
          int time_start = payload_dic~load_uint(256);
          int points = calculate_reward(level_, type_);
          int amounts = calculate_reward_jetton(level_,type_,total_add, budget, time_start);
          return amounts;
        }
  return 0;
}